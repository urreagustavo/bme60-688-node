#include "LoRaWan_APP.h" //Librería de LoRaWan para arduino que soporta el Heltec HTCC-AB01
#include "Arduino.h"    //Librería de arduino que permite trabajar con diferentes micros (AVR) y con el IDE(Integrated Development Environment)de manera más completa
//Librerias para trabajar con sensor de temperatura de suelo
#include <OneWire.h>                
#include <DallasTemperature.h>

/*
 * set LoraWan_RGB to Active,the RGB active in loraWan
 * RGB red means sending;
 * RGB purple means joined done;
 * RGB blue means RxWindow1;
 * RGB yellow means RxWindow2;
 * RGB green means received done;
 */

#include <Wire.h>
#include <SPI.h>
#include <Adafruit_Sensor.h>
#include "Adafruit_BME680.h"

#define BME_SCK 13
#define BME_MISO 12
#define BME_MOSI 11
#define BME_CS 10

#define SEALEVELPRESSURE_HPA (1013.25)

Adafruit_BME680 bme; // I2C
//Adafruit_BME680 bme(BME_CS); // hardware SPI
//Adafruit_BME680 bme(BME_CS, BME_MOSI, BME_MISO,  BME_SCK);

//uint8_t: Unsigned integer - 8 bits - 1 byte. Se usa para definir variables de direcciones de los dispositivos. Se utiliza este tipo de definición debido a que 
//se va a trabajar en código binario (en hexa)y garantiza un menor consumo en tamaño de datos.

/* OTAA para*/
uint8_t devEui[] = { 0x70, 0xb3, 0xd5, 0x7e, 0xd0, 0x05, 0x4c, 0x96 };  //{ 0x22, 0x32, 0x33, 0x00, 0x00, 0x88, 0x88, 0x02 };
uint8_t appEui[] = { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 };
uint8_t appKey[] = { 0x3c, 0x7f, 0xfa, 0x9c, 0x48, 0x7a, 0x20, 0x09, 0x14, 0x6e, 0xb5, 0x7c, 0xf3, 0x1b, 0xcd, 0xbd };//{ 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x88, 0x66, 0x01 };

/* ABP para*/

uint8_t nwkSKey[] = { 0x87, 0x93, 0xB2, 0xA0, 0x34, 0xC6, 0x1A, 0xA5, 0xBA, 0x74, 0xF8, 0x2A, 0x71, 0x2C, 0xD0, 0x05 };
uint8_t appSKey[] = { 0x65, 0x04, 0xD9, 0x66, 0x70, 0x13, 0xB1, 0xAC, 0xF5, 0x76, 0x88, 0x1E, 0x4B, 0x41, 0x0E, 0x9B };
uint32_t devAddr =  ( uint32_t )0x260CDC0F;

/*LoraWan channelsmask, default channels 0-7*/ 
//uint16_t userChannelsMask[6]={ 0x00FF,0x0000,0x0000,0x0000,0x0000,0x0000 };
uint16_t userChannelsMask[6]={ 0xFF00,0x0000,0x0000,0x0000,0x0000,0x0000 }; //Con esta máscara funcionó, esta es la máscara con la que trabaja ttn FSB2



/*LoraWan region, select in arduino IDE tools*/
LoRaMacRegion_t loraWanRegion = ACTIVE_REGION; //LoRaMacRegion_t: Funcion booleana que indica la región y frecuencia respectiva están activas o no.
                                               //ACTIVE_REGION: Parámetro que toma los datos de la pestaña herramientas

/*LoraWan Class, Class A and Class C are supported*/
DeviceClass_t  loraWanClass = LORAWAN_CLASS;  //DeviceClass_t: Permite que se defina la clase de EndDevice si es clase a, b o c. LORAWAN_CLASS según lo seleccionado en herramientas.
                                              //{ CLASS_A = 0x00, CLASS_B = 0x01, CLASS_C = 0x02 }

/*the application data transmission duty cycle.  value in [ms].*/
uint32_t appTxDutyCycle = 180000;// 3 minutos

/*OTAA or ABP*/
bool overTheAirActivation = LORAWAN_NETMODE;

/*ADR (Adaptative Data Rate) enable*/
bool loraWanAdr = LORAWAN_ADR;

/* set LORAWAN_Net_Reserve ON, the node could save the network info to flash, when node reset not need to join again */
bool keepNet = LORAWAN_NET_RESERVE;

/* Indicates if the node is sending confirmed or unconfirmed messages */
bool isTxConfirmed = LORAWAN_UPLINKMODE;

/* Application port */
//Cambia el puerto, por defecto es 2
uint8_t appPort = 3; //2;

/*!
* Number of trials to transmit the frame, if the LoRaMAC layer did not
* receive an acknowledgment. The MAC performs a datarate adaptation,
* according to the LoRaWAN Specification V1.0.2, chapter 18.4, according
* to the following table:
*
* Transmission nb | Data Rate
* ----------------|-----------
* 1 (first)       | DR
* 2               | DR
* 3               | max(DR-1,0)
* 4               | max(DR-1,0)
* 5               | max(DR-2,0)
* 6               | max(DR-2,0)
* 7               | max(DR-3,0)
* 8               | max(DR-3,0)
*
* Note, that if NbTrials is set to 1 or 2, the MAC will not decrease
* the datarate, in case the LoRaMAC layer did not receive an acknowledgment
*/
uint8_t confirmedNbTrials = 4;

int cont=0;

/* Prepares the payload of the frame */
static void prepareTxFrame( uint8_t port )
{
    cont+=1;
    //pinMode(Vext, OUTPUT);
    
    // Vext ON
    digitalWrite(Vext, LOW);// Vext: GPIO 6 --> LOW --> Vext(3.3V/300mA) = ON // - GPIO 6 --> HIGH --> Vext(3.3V/300mA) = OFF
    //if (cont==1) {
    //  Serial.println("Espere 30min");
    //  delay(1800000);
    //}
    delay(1000);
    
/**********************************************************/
  /****BME680****/

  //Variables
    float humd = 0;
    float temp = 0;
    int smk=0; //bandera humo

    if (! bme.performReading()) {
      Serial.println("Failed to perform reading :(");
      return;
    }
    Serial.print("- Temperatura ambiente = \t\t");
    Serial.print(bme.temperature);
    Serial.println(" *C");
    temp=bme.temperature;

    Serial.print("- Humedad relativa = \t\t");
    Serial.print(bme.humidity);
    Serial.println(" %");
    humd=bme.humidity;
    
    Serial.print("- Gas = \t\t");
    Serial.print(bme.gas_resistance / 1000.0);
    Serial.println(" KOhms");
    if ((bme.gas_resistance / 1000.0)>10.0)
    {
        Serial.print("No hay humo \n");
        smk = 0;
    }
    else
    {
        Serial.print("Hay humo \n");
        smk = 1;
    }

    //delay(200);

    //Serial.println();
    delay(2000);

/**********************************************************/

  /*****Estado de la bateria*****/    
    //Variables para estado de batería
    float batteryVoltage = getBatteryVoltage();
    float bcalcVoltage = 0;
    int voltint=0;
    int parteint=0;
    int partedec=0;

    //Programa
//    Serial.print("Battery Voltage: ");
//    Serial.print(batteryVoltage);
//    Serial.println(" V");
  
    bcalcVoltage = (batteryVoltage)/1000;// * (3.7 / 1024.0);
    Serial.print("- Estado de Batería = \t\t");
    Serial.print(bcalcVoltage);
    Serial.println(" V");

    parteint=bcalcVoltage;
//    Serial.print("Parte entera: ");
//    Serial.println(parteint);
  
    voltint=bcalcVoltage*100;
    partedec=(voltint%100);
//    Serial.print("Parte decimal: ");
//    Serial.println(partedec);

    delay(200);

  Serial.println(cont);
  Serial.println();
  /*appData size is LORAWAN_APP_DATA_MAX_SIZE which is defined in "commissioning.h".
  *appDataSize max value is LORAWAN_APP_DATA_MAX_SIZE.
  *if enabled AT, don't modify LORAWAN_APP_DATA_MAX_SIZE, it may cause system hanging or failure.
  *if disabled AT, LORAWAN_APP_DATA_MAX_SIZE can be modified, the max value is reference to lorawan region and SF.
  *for example, if use REGION_CN470, 
  *the max value for different DR can be found in MaxPayloadOfDatarateCN470 refer to DataratesCN470 and BandwidthsCN470 in "RegionCN470.h".
  */
  //Para cambiar el conenido del mensaje
    appDataSize = 5;
    appData[0] = temp;
    appData[1] = humd;
    appData[2] = smk;
    appData[3] = parteint;
    appData[4] = partedec;
}

void setup() {
  pinMode(Vext, OUTPUT);
  Serial.begin(115200);
  
  while (!Serial);
  Serial.println(F("BME680 test"));
  
  if (!bme.begin()) {
    Serial.println("Could not find a valid BME680 sensor, check wiring!");
    while (1);
  }

 // Set up oversampling and filter initialization
  bme.setTemperatureOversampling(BME680_OS_8X);
  bme.setHumidityOversampling(BME680_OS_2X);
  bme.setPressureOversampling(BME680_OS_4X);
  bme.setIIRFilterSize(BME680_FILTER_SIZE_3);
  bme.setGasHeater(320, 150); // 320*C for 150 ms 

#if(AT_SUPPORT)
  enableAt();
#endif
  deviceState = DEVICE_STATE_INIT;
  LoRaWAN.ifskipjoin();
}

void loop()
{
  switch( deviceState )
  {
    case DEVICE_STATE_INIT:
    {
#if(LORAWAN_DEVEUI_AUTO)
      LoRaWAN.generateDeveuiByChipID();
#endif
#if(AT_SUPPORT)
      getDevParam();
#endif
      printDevParam();
      LoRaWAN.init(loraWanClass,loraWanRegion);
      deviceState = DEVICE_STATE_JOIN;
      break;
    }
    case DEVICE_STATE_JOIN:
    {
      LoRaWAN.join();
      break;
    }
    case DEVICE_STATE_SEND:
    {
      prepareTxFrame( appPort );
      LoRaWAN.send();
      deviceState = DEVICE_STATE_CYCLE;
      break;
    }
    case DEVICE_STATE_CYCLE:
    {
      // Schedule next packet transmission
      txDutyCycleTime = appTxDutyCycle + randr( 0, APP_TX_DUTYCYCLE_RND );
      LoRaWAN.cycle(txDutyCycleTime);
      deviceState = DEVICE_STATE_SLEEP;
      break;
    }
    case DEVICE_STATE_SLEEP:
    {
      LoRaWAN.sleep();
      break;
    }
    default:
    {
      deviceState = DEVICE_STATE_INIT;
      break;
    }
  }
}
